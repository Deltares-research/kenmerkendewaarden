[build-system]
requires = ["setuptools>=64.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "kenmerkendewaarden"
version = "0.2.0"
maintainers = [{ name = "Jelmer Veenstra", email = "jelmer.veenstra@deltares.nl" }]
description = "Derive indicators from waterlevel measurements"
readme = "README.md"
keywords = ["kenmerkendewaarden"]
license = { text = "GPLv3" }
requires-python = ">=3.9"
dependencies = [
	#numpy 1.21 is EOL since june 2023
	"numpy>=1.22.0",
	#pandas<2.0.0 supports non-nanosecond timestep and therefore larger min/max range
	"pandas>=2.0.0",
	#matplotlib<3.5.2 raises "ValueError: Multi-dimensional indexing" in hatyan.plot_timeseries()
	"matplotlib>=3.5.2",
	#netcdf4<1.5.4 pip install fails in py39
	"netcdf4>=1.5.4",
	#xarray<2023.4.0 conflicts with pandas<2.0.0 for resampling, only available for py39
	"xarray>=2023.4.0",
	#rws-ddlpy<0.5.0 supports timezones for input dates and yearly freq
	"rws-ddlpy>=0.5.0",
	#hatyan<2.8.0 has old ddlpy_helpers functions and this version had many updates
	"hatyan>=2.8.0",
	#statsmodels<0.13.2 has no support for pandas 2.0.0
	"statsmodels>=0.13.2",
	#pyproj<3.1.0 not pip installable in py38
	"pyproj>=3.1.0",
	#pooch<1.1.0 do not have attribute retrieve
	"pooch>=1.1.0",
]
classifiers = [
	"Development Status :: 2 - Pre-Alpha",
	"Intended Audience :: Science/Research",
	"Operating System :: OS Independent",
	"Topic :: Scientific/Engineering :: Information Analysis",
	"License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
	"Programming Language :: Python",
	"Programming Language :: Python :: 3",
	"Programming Language :: Python :: 3.9",
	"Programming Language :: Python :: 3.10",
	"Programming Language :: Python :: 3.11",
	"Programming Language :: Python :: 3.12",
]

[project.urls]
Home = "https://github.com/deltares-research/kenmerkendewaarden"
Code = "https://github.com/deltares-research/kenmerkendewaarden"
Issues = "https://github.com/deltares-research/kenmerkendewaarden/issues"

[project.optional-dependencies]
dev = [
	"bump2version>=0.5.11",
	"flake8",
	"pytest",
	"pytest-cov",
	"twine",
	"build",
	"black",
]
docs = [
	"sphinx>=1.8.1",
	"sphinx_mdinclude",
	"nbsphinx",
	"pydata-sphinx-theme",
	#"pandoc", # installed with choco on github
]
examples = [
	"jupyter",
	"notebook",
]

[tool.setuptools]
packages = ["kenmerkendewaarden"]

[tool.pytest.ini_options]
console_output_style = "count"
testpaths = ["tests"]
addopts = "-v --tb=short --durations=0"
filterwarnings = ["ignore::UserWarning"]
markers = [
	"unittest: mark a test as unittest. Used for testing single methods",
	"systemtest: mark a test as systemtest. Used for testing at a higher level, verifying a given input returns the expected output",
	"acceptance: mark a test as acceptance. Used for non-functional requirements and data that needs to be human-verified",
]
